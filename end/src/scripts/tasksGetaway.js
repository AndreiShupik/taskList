const baseUrl = 'https://crudcrud.com/api/e09d4d72e1dc43a9a842728cb0506070/tasks'

const mapTasks = tasks => // функция маппинга, которая принимает в аргумент массив списка задач, элементы которого объекты задач из списка задач
    tasks.map(({ _id, ...rest }) => ({...rest, id: _id })) // проходится по их массиву при помощи .map(), берет у каждой задачи только свойство _id, не трогая, (...rest)
    // все остальные свойства, и присваивает обновленной задаче, все свойства со значениями старой задачи, меняя только свойство id на значение свойства _id старой задачи

export const getTasksList = () => { // функция, котораая возвращает список задач с crud-сервера
    return fetch(baseUrl) // обращаемся к crud-серверу, указывая url, если 2м
        // аргументом не передаем ничего, там автоматически подставляеся get (получить)
        .then(response => response.json()) // тогда, получив promise от fetch, берем список задач и обрабатываем его json()
        .then(tasks => mapTasks(tasks)) // получив promise из предыдущего .then, вызывем функцию для ее маппинга
}

export const createTask = taskData => {
    return fetch(baseUrl, { // поскольку операция асинхронная, мы должны вернуть promise этого метода, чтобы кто-то мог на него
            //  подписаться
            method: 'POST', // через метод 'POST' мы записываем данные на сервер
            headers: { // рассказывает серверу, какие данные мы ему отправляем
                'Content-Type': 'application/json;charset=utf-8' // в данном случае, с помощью заголовка Content-Type, мы указываем тип 
            }, // данных, которые мы записываем на сервер. application/json - если тип данных json и charset=utf-8 (чаще всего) - кодировка
            body: JSON.stringify(taskData) // указываем, какие именно данные отправляем на сервер. Поскольку данные по сети ходят в виде
        }) // строк, а не объектов, которые мы исользуем в JS, то с помощью JSON.stringify(), переводим их в строку JSON.  
}

export const updateTask = (taskId, updatedTaskData) => {
    return fetch(`${baseUrl}/${taskId}`, { // поскольку операция асинхронная, мы должны вернуть promise этого метода, чтобы кто-то мог на него
        // подписаться
        method: 'PUT', // через метод 'POST' мы записываем данные на сервер
        headers: { // рассказывает серверу, какие данные мы ему отправляем
            'Content-Type': 'application/json;charset=utf-8' // в данном случае, с помощью заголовка Content-Type, мы указываем тип 
        }, // данных, которые мы записываем на сервер. application/json - если тип данных json и charset=utf-8 (чаще всего) - кодировка
        body: JSON.stringify(updatedTaskData) // указываем, какие именно данные отправляем на сервер. Поскольку данные по сети ходят в виде
    })
}

export const deleteTask = (taskId) => {
    return fetch(`${baseUrl}/${taskId}`, { // поскольку операция асинхронная, мы должны вернуть promise этого метода, чтобы кто-то мог на него подписаться
        method: 'DELETE', // через метод 'DELET' мы удаляем данные с сервера
    })
}